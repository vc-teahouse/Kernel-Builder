name: "Build kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:
    inputs:
        KernelSU-Variable:
            descript:
            required: true
            type: choice
            default: 'YCRKSU'
            options:
                - 'OFFICAL'
                - 'SUKISU'
                - 'YCRKSU'
                - 'RKSU'
                - 'NEXT'
        with_susfs:
            required: true
            type: boolean
            default: true
        with_kpm:
            required: true
            type: boolean
            default: true
        with_lxc:
            required: true
            type: boolean
            default: false
jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v4

      - name: "😆 Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-22.04
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}

      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}

      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.device }}_defconfig

      withKernelSU: ${{ matrix.repos.withKernelSU }}
      useCustomtool: ${{ matrix.repos.useCustomtool }}
      isConfiginvendor: ${{ matrix.repos.isConfiginvendor }}
      dtbPath: ${{ matrix.repos.dtbPath }}
    steps:
      - name: Set Git config
        run: |
          git config --global user.name github-actions[bot]
          git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: "✨ Create working dir"
        run: mkdir -p $kernelDir

      - uses: actions/checkout@v4
        with:
          path: ./${{ env.kernelDir }}/patch
      - name: "⭐ Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python2 python3 libarchive-tools

      - name: "🌟 Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --recursive --branch $kernelBranch $kernelRepo $kernelName --depth=1

      - name: "💫 Get Customtoolchains"
        working-directory: ./${{ env.kernelDir }}
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        if: ${{ env.useCustomtool == 'true' }}
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo $toolchains_num
          for ((i=0;i<toolchains_num;i++)); do
            name=$(echo $toolchains | jq -r ".[$i].name")
            repo=$(echo $toolchains | jq -r ".[$i].repo")
            branch=$(echo $toolchains | jq -r ".[$i].branch")
            git clone --recursive --branch $branch $repo $name --depth=1
            echo "$(pwd)/$name" >> $GITHUB_PATH
            echo "$(pwd)/$name/toolgcc/bin" >> $GITHUB_PATH
            echo "$(pwd)/$name/toolclang/clang-r428724/bin" >> $GITHUB_PATH
            echo "$(pwd)/$name/toolgcc/arm/bin" >> $GITHUB_PATH
          done

          echo "PATH Variable: $PATH"

      - name: "💫 Get toolchains"
        working-directory: ./${{ env.kernelDir }}
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        if: ${{ env.useCustomtool != 'true' }}
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo $toolchains_num
          for ((i=0;i<toolchains_num;i++)); do
            name=$(echo $toolchains | jq -r ".[$i].name")
            repo=$(echo $toolchains | jq -r ".[$i].repo")
            branch=$(echo $toolchains | jq -r ".[$i].branch")
            git clone --recursive --branch $branch $repo $name --depth=1
            echo "$(pwd)/$name/" >> $GITHUB_PATH
            echo "$(pwd)/$name/bin" >> $GITHUB_PATH
          done

          echo "PATH Variable: $PATH"

      - name: "😎 Set args"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "PATH Variable: $PATH"
          ARCH=$(echo $params | jq -r ".ARCH")
          CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
          CROSS_COMPILE_COMPAT=$(echo $params | jq -r ".CROSS_COMPILE_COMPAT")
          CROSS_COMPILE_ARM32=$(echo $params | jq -r ".CROSS_COMPILE_ARM32")
          CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
          AR=$(echo $params | jq -r ".AR")
          CC=$(echo $params | jq -r ".CC")
          HOSTCXX=$(echo $params | jq -r ".HOSTCXX")
          NM=$(echo $params | jq -r ".NM")
          OBJCOPY=$(echo $params | jq -r ".OBJCOPY")
          OBJDUMP=$(echo $params | jq -r ".OBJDUMP")
          STRIP=$(echo $params | jq -r ".STRIP")
          LD=$(echo $params | jq -r ".LD")
          DTC_EXT=$(echo $params | jq -r ".DTC_EXT")

          echo "ARCH=$ARCH" >> $GITHUB_ENV

          args="-j$(nproc --all)"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p $(pwd)/${{ env.OUT_DIR }}
            args="$args O=$(pwd)/${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CROSS_COMPILE" ]; then
            args="$args CROSS_COMPILE=$CROSS_COMPILE"
          fi
          if [ -n "$CLANG_TRIPLE" ]; then
            args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
          fi
          if [ -n "$CROSS_COMPILE_COMPAT" ]; then
            args="$args CROSS_COMPILE_ARM32=$CROSS_COMPILE_COMPAT"
          fi
          if [ -n "$AR" ]; then
            args="$args AR=$AR"
          fi
          if [ -n "$CC" ]; then
            args="$args CC=$CC"
          fi
          if [ -n "$HOSTCXX" ]; then
            args="$args HOSTCXX=$HOSTCXX"
          fi
          if [ -n "$NM" ]; then
            args="$args NM=$NM"
          fi
          if [ -n "$OBJCOPY" ]; then
            args="$args OBJCOPY=$OBJCOPY"
          fi
          if [ -n "$OBJDUMP" ]; then
            args="$args OBJDUMP=$OBJDUMP"
          fi
          if [ -n "$STRIP" ]; then
            args="$args STRIP=$STRIP"
          fi
          if [ -n "$LD" ]; then
            args="$args LD=$LD"
          fi
          if [ -n "$DTC_EXT" ]; then
            args="$args DTC_EXT=$DTC_EXT"
          fi
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "😋 Setup KernelSU"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          if [ "${{ github.event.inputs.with_susfs }}" == "true" ] && [ "${{ github.event.inputs.KernelSU-Variable}}" != "OFFICAL" ]; then
            git am ../patch/patches/susfs159.patch
            if [ "${{ github.event.inputs.KernelSU-Variable}}" == "SUKISU" ]; then
                KSU_BRANCH=susfs-main
            elif [ "${{ github.event.inputs.KernelSU-Variable}}" == "YCRKSU" ] || [ "${{ github.event.inputs.KernelSU-Variable}}" == "RKSU" ] ; then
                KSU_BRANCH=staging/susfs-main
            fi
            echo -e "\nCONFIG_KSU_SUSFS=y" >> ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}
          else
            if [ "${{ github.event.inputs.KernelSU-Variable}}" == "SUKISU" ]; then
                KSU_BRANCH=nongki
            else
                KSU_BRANCH=main
            fi
          fi

          if [ "${{ github.event.inputs.KernelSU-Variable}}" == "OFFICAL" ]; then
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5
          elif [ "${{ github.event.inputs.KernelSU-Variable}}" == "RKSU" ]; then
            curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s $KSU_BRANCH
          elif [ "${{ github.event.inputs.KernelSU-Variable}}" == "YCRKSU" ]; then
            curl -LSs "https://raw.githubusercontent.com/luyanci/KernelSU/main/kernel/setup.sh" | bash -s $KSU_BRANCH
          elif [ "${{ github.event.inputs.KernelSU-Variable}}" == "SUKISU" ]; then
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s $KSU_BRANCH
          elif [ "${{ github.event.inputs.KernelSU-Variable}}" == "NEXT" ]; then
            if [ "${{ github.event.inputs.with_susfs }}" == "true" ]; then
                curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
            else
                curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
            fi
          fi

          echo -e "\nCONFIG_KSU=y" >> ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}
          echo -e "\nCONFIG_KSU_MANUAL_HOOK=y" >> ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}

          cat ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}

      - name: "😋 Add KPM patcher (SukiSU only)"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.with_kpm == 'true' && github.event.inputs.KernelSU-Variable == 'SUKISU' }}
        run: |
          echo -e "\nCONFIG_KPM=y" >> ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}
          echo -e "\nCONFIG_KALLSYMS=y" >> ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}
          echo -e "\nCONFIG_KALLSYMS_ALL=y" >> ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}
          git am ../patch/patches/autopatchkpm.patch
          chmod +x ./patch_kpm.sh
          ./patch_kpm.sh --download
          cat ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}

      - name: "😋 Add LXC docker"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.with_lxc == 'true' }}
        run: |
          git submodule add http://github.com/tomxi1997/lxc-docker-support-for-android utils
          echo -e '\nsource "utils/Kconfig"' >> ./Kconfig
          echo -e "\nCONFIG_DOCKER=y" >> ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}
          sed -i '/CONFIG_ANDROID_PARANOID_NETWORK/d' ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}
          echo -e "\n# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> ./arch/${{ env.ARCH }}/configs/vendor/${{ env.DEFCONFIG_NAME }}
          patch -p1 < ./utils/fix_cgroup.patch

      - name: "👍 Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        if: ${{ env.isConfiginvendor == 'true' }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} vendor/${{ env.DEFCONFIG_NAME }}
        
      - name: "👍 Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}4
        if: ${{ env.isConfiginvendor != 'true' }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "🎶 Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${args}

      - name: "💛 Upload Image"
        uses: actions/upload-artifact@v4
        with:
          name: Image(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: "💙 Upload Image.gz"
        uses: actions/upload-artifact@v4
        with:
          name: Image.gz(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "💜 Upload dtb"
        uses: actions/upload-artifact@v4
        with:
          name: dtb(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/${{ env.dtbPath }}
          if-no-files-found: ignore
          retention-days: 7

      - name: "❤️ Upload dtbo.img"
        uses: actions/upload-artifact@v4
        with:
          name: dtbo.img(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7

      - name: "❤️ Make Anykernel3"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone https://github.com/SlackerState/AnyKernel3
          cp "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz" AnyKernel3/
          cp "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/${{ env.dtbPath }}" AnyKernel3/dtb
          cp "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img" AnyKernel3/
          rm -rf AnyKernel3/.git* AnyKernel3/README.md
          cd AnyKernel3/
          zip -q -r "../Anykernel3(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }}).zip" *

      - name: "❤️ Upload Anykernel3"
        uses: actions/upload-artifact@v4
        with:
          name: Anykernel3(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/AnyKernel3/*
          if-no-files-found: ignore
          retention-days: 7

      - name: 🧧 Create GitHub Release => (${{ github.run_number }})
        env:
          ANYKERNEL3_FILE: "./${{ env.kernelDir }}/Anykernel3(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }}).zip"
        continue-on-error: true
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          files: "${{ env.ANYKERNEL3_FILE }}"
          generate_release_notes: false
